-- ============================================
-- SISTEMA DE AUTENTICA√á√ÉO DE USU√ÅRIOS (VERS√ÉO SIMPLES)
-- ============================================
-- Execute este script para adicionar autentica√ß√£o de clientes
-- Vers√£o sem trigger autom√°tico (cria√ß√£o via c√≥digo)

-- 1. Adicionar campo user_id na tabela clientes
ALTER TABLE clientes 
ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;

-- 2. Criar √≠ndice para otimizar buscas
CREATE INDEX IF NOT EXISTS idx_clientes_user_id ON clientes(user_id);

-- 3. Remover pol√≠ticas antigas de agendamentos (se existirem)
DROP POLICY IF EXISTS "Permitir leitura p√∫blica de agendamentos" ON agendamentos;
DROP POLICY IF EXISTS "Permitir inser√ß√£o p√∫blica de agendamentos" ON agendamentos;
DROP POLICY IF EXISTS "Clientes veem seus pr√≥prios agendamentos" ON agendamentos;
DROP POLICY IF EXISTS "Admin v√™ todos os agendamentos" ON agendamentos;
DROP POLICY IF EXISTS "Admin pode atualizar agendamentos" ON agendamentos;
DROP POLICY IF EXISTS "Permitir atualiza√ß√£o de agendamentos" ON agendamentos;

-- 4. Criar novas pol√≠ticas para agendamentos
-- Permitir inser√ß√£o p√∫blica (qualquer um pode agendar)
CREATE POLICY "Permitir inser√ß√£o p√∫blica de agendamentos" ON agendamentos 
  FOR INSERT WITH CHECK (true);

-- Clientes autenticados podem ver seus pr√≥prios agendamentos
CREATE POLICY "Clientes veem seus pr√≥prios agendamentos" ON agendamentos 
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM clientes 
      WHERE clientes.id = agendamentos.cliente_id 
      AND clientes.user_id = auth.uid()
    )
    OR auth.uid() IS NULL -- Permite visualiza√ß√£o p√∫blica tamb√©m
  );

-- Admin/usu√°rios autenticados podem atualizar agendamentos
CREATE POLICY "Permitir atualiza√ß√£o de agendamentos" ON agendamentos 
  FOR UPDATE USING (true);

-- 5. Atualizar pol√≠tica de clientes para permitir atualiza√ß√£o
DROP POLICY IF EXISTS "Clientes podem atualizar seus pr√≥prios dados" ON clientes;
DROP POLICY IF EXISTS "Permitir atualiza√ß√£o de user_id" ON clientes;

CREATE POLICY "Clientes podem atualizar seus pr√≥prios dados" ON clientes 
  FOR UPDATE USING (auth.uid() = user_id OR auth.uid() IS NULL);

-- 6. Permitir que clientes atualizem a conex√£o user_id (para vincular contas existentes)
CREATE POLICY "Permitir atualiza√ß√£o de user_id" ON clientes
  FOR UPDATE USING (true)
  WITH CHECK (true);

-- ============================================
-- CONFIGURA√á√ïES DE SEGURAN√áA
-- ============================================

-- Garantir que a tabela clientes tem RLS habilitado
ALTER TABLE clientes ENABLE ROW LEVEL SECURITY;

-- Garantir que a tabela agendamentos tem RLS habilitado
ALTER TABLE agendamentos ENABLE ROW LEVEL SECURITY;

-- ============================================
-- VERIFICA√á√ÉO FINAL
-- ============================================

-- Verificar se a coluna foi criada
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 
    FROM information_schema.columns 
    WHERE table_name = 'clientes' 
    AND column_name = 'user_id'
  ) THEN
    RAISE NOTICE 'Campo user_id criado com sucesso na tabela clientes';
  ELSE
    RAISE EXCEPTION 'Erro: Campo user_id n√£o foi criado';
  END IF;
END $$;

-- Verificar pol√≠ticas
DO $$
BEGIN
  RAISE NOTICE '‚úÖ Pol√≠ticas de seguran√ßa configuradas com sucesso!';
  RAISE NOTICE '‚úÖ Sistema de autentica√ß√£o de usu√°rios ativo.';
  RAISE NOTICE '';
  RAISE NOTICE 'üîê Agora os clientes podem:';
  RAISE NOTICE '   - Criar conta com email/senha';
  RAISE NOTICE '   - Fazer login';
  RAISE NOTICE '   - Ver seus pr√≥prios agendamentos';
  RAISE NOTICE '   - Agendar novos hor√°rios';
  RAISE NOTICE '';
  RAISE NOTICE '‚ö†Ô∏è  IMPORTANTE: A cria√ß√£o do perfil de cliente √© feita via c√≥digo.';
END $$;
